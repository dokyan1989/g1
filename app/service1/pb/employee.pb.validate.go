// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: employee.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _employee_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListEmployeesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEmployeesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFromBirthDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeesRequestValidationError{
				field:  "FromBirthDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToBirthDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeesRequestValidationError{
				field:  "ToBirthDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Gender

	if v, ok := interface{}(m.GetFromHireDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeesRequestValidationError{
				field:  "FromHireDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToHireDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeesRequestValidationError{
				field:  "ToHireDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListEmployeesRequestValidationError is the validation error returned by
// ListEmployeesRequest.Validate if the designated constraints aren't met.
type ListEmployeesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeesRequestValidationError) ErrorName() string {
	return "ListEmployeesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeesRequestValidationError{}

// Validate checks the field values on ListEmployeesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEmployeesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEmployeesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEmployeesResponseValidationError is the validation error returned by
// ListEmployeesResponse.Validate if the designated constraints aren't met.
type ListEmployeesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeesResponseValidationError) ErrorName() string {
	return "ListEmployeesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeesResponseValidationError{}

// Validate checks the field values on CreateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEmployeeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetBirthDate() == nil {
		return CreateEmployeeRequestValidationError{
			field:  "BirthDate",
			reason: "value is required",
		}
	}

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		return CreateEmployeeRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		return CreateEmployeeRequestValidationError{
			field:  "LastName",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _CreateEmployeeRequest_Gender_InLookup[m.GetGender()]; !ok {
		return CreateEmployeeRequestValidationError{
			field:  "Gender",
			reason: "value must be in list [1 2]",
		}
	}

	if m.GetHireDate() == nil {
		return CreateEmployeeRequestValidationError{
			field:  "HireDate",
			reason: "value is required",
		}
	}

	return nil
}

// CreateEmployeeRequestValidationError is the validation error returned by
// CreateEmployeeRequest.Validate if the designated constraints aren't met.
type CreateEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmployeeRequestValidationError) ErrorName() string {
	return "CreateEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmployeeRequestValidationError{}

var _CreateEmployeeRequest_Gender_InLookup = map[Gender]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on CreateEmployeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEmployeeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EmpNo

	return nil
}

// CreateEmployeeResponseValidationError is the validation error returned by
// CreateEmployeeResponse.Validate if the designated constraints aren't met.
type CreateEmployeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmployeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmployeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmployeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmployeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmployeeResponseValidationError) ErrorName() string {
	return "CreateEmployeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmployeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmployeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmployeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmployeeResponseValidationError{}

// Validate checks the field values on UpdateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEmployeeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEmpNo() < 1 {
		return UpdateEmployeeRequestValidationError{
			field:  "EmpNo",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetBirthDate() == nil {
		return UpdateEmployeeRequestValidationError{
			field:  "BirthDate",
			reason: "value is required",
		}
	}

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		return UpdateEmployeeRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		return UpdateEmployeeRequestValidationError{
			field:  "LastName",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _UpdateEmployeeRequest_Gender_InLookup[m.GetGender()]; !ok {
		return UpdateEmployeeRequestValidationError{
			field:  "Gender",
			reason: "value must be in list [1 2]",
		}
	}

	if m.GetHireDate() == nil {
		return UpdateEmployeeRequestValidationError{
			field:  "HireDate",
			reason: "value is required",
		}
	}

	return nil
}

// UpdateEmployeeRequestValidationError is the validation error returned by
// UpdateEmployeeRequest.Validate if the designated constraints aren't met.
type UpdateEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeRequestValidationError) ErrorName() string {
	return "UpdateEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeeRequestValidationError{}

var _UpdateEmployeeRequest_Gender_InLookup = map[Gender]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on UpdateEmployeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEmployeeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EmpNo

	return nil
}

// UpdateEmployeeResponseValidationError is the validation error returned by
// UpdateEmployeeResponse.Validate if the designated constraints aren't met.
type UpdateEmployeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeResponseValidationError) ErrorName() string {
	return "UpdateEmployeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeeResponseValidationError{}

// Validate checks the field values on DeleteEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEmployeeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEmpNo() < 1 {
		return DeleteEmployeeRequestValidationError{
			field:  "EmpNo",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// DeleteEmployeeRequestValidationError is the validation error returned by
// DeleteEmployeeRequest.Validate if the designated constraints aren't met.
type DeleteEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeeRequestValidationError) ErrorName() string {
	return "DeleteEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeeRequestValidationError{}

// Validate checks the field values on DeleteEmployeeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEmployeeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EmpNo

	return nil
}

// DeleteEmployeeResponseValidationError is the validation error returned by
// DeleteEmployeeResponse.Validate if the designated constraints aren't met.
type DeleteEmployeeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeeResponseValidationError) ErrorName() string {
	return "DeleteEmployeeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeeResponseValidationError{}
